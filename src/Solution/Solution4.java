package Solution;
/*如何求整数A和B的二进制表示中有多少位不同？
如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减去1，
那么原来处在整数最右边的1就会变成0，原来在1后面的所有的0都会变成1。其余的所有位将不受到影响。
举个例子：一个二进制数1100，从右边数起的第三位是处于最右边的一个1。减去1后，
第三位变成0，它后面的两位0变成1，而前面的1保持不变，因此得到结果是1011。
我们发现减1的结果是把从最右边一个1开始的所有位都取反了。
这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。
如1100&1011=1000。也就是说，把一个整数减去1，再和自己进行&运算，那么就消掉了该整数用二进制表示的最后一个1。
一开始时，我们把要求的两个整数进行异或运算，这样相同为0，不同为1，
这样，我们就可以通过上诉方法统计一共有多少不同的1，这就是最后的答案。
 */
public class Solution4 {
    int cal(int a,int b)
    {
        int tmp=a^b;
        int indext=0;
        while(tmp!=0)
        {
            tmp&=(tmp-1);
            indext++;
        }
        return indext;
    }
}
//    int cal(int a, int b)
//    {
//        int M = a ^ b;
//        int num = 0;
//        while(M)
//        {
//            M &= (M-1);
//            num++;
//        }
//        return num;
//    }
